package client

import (
	"bytes"
	"fmt"

	"github.com/ubombar/soa/api"
)

func generateQuestionContent() (*bytes.Buffer, error) {
	b := bytes.NewBufferString("\n")
	return b, nil
}

func generateLiteratureContent(attach *api.ZoteroAttachementItem) (*bytes.Buffer, error) {
	b := bytes.NewBufferString("`this file is autogenerated`\n\n")

	for _, annot := range attach.Annotations {
		switch annot.AnnotationType {
		case api.Highlight:
			if err := generateLiteratureHighlight(annot, b); err != nil {
				return nil, err
			}
		case api.Ink:
			// cannot annotate that in markdown
		case api.Text:
			// no markdown for plain text
		case api.Note:
			if err := generateLiteratureNote(annot, b); err != nil {
				return nil, err
			}
		case api.Image:
			// cannot anotate that either
		case api.Underline:
			if err := generateLiteratureUnderline(annot, b); err != nil {
				return nil, err
			}
		}
	}

	return b, nil
}

var ColorToIcon = map[api.AnnotationColor]string{
	api.ColorYellow:  "üü®",
	api.ColorRed:     "üü•",
	api.ColorGreen:   "üü©",
	api.ColorBlue:    "üü¶",
	api.ColorPurple:  "üü™",
	api.ColorMagenta: "‚ùì",
	api.ColorOrage:   "‚ùì",
	api.ColorGray:    "‚ùì",
}

func generateLiteratureHighlight(annot api.ZoteroAnnotation, b *bytes.Buffer) error {
	comment := fmt.Sprintf("%s\n", annot.AnnotationComment)
	if annot.AnnotationComment == "" {
		comment = ""
	}
	text := fmt.Sprintf("highlight %s(p.%s[%d]):\n`%s`\n%s\n",
		ColorToIcon[annot.AnnotationColor],
		annot.AnnotationPageLabel,
		annot.AnnotationPosition.PageIndex,
		annot.AnnotationText,
		comment)

	b.WriteString(text)
	return nil
}

func generateLiteratureNote(annot api.ZoteroAnnotation, b *bytes.Buffer) error {
	comment := fmt.Sprintf("%s\n", annot.AnnotationComment)
	if annot.AnnotationComment == "" {
		comment = ""
	}
	text := fmt.Sprintf("note %s(p.%s[%d]):\n\n%s\n",
		ColorToIcon[annot.AnnotationColor],
		annot.AnnotationPageLabel,
		annot.AnnotationPosition.PageIndex,
		comment)

	b.WriteString(text)
	return nil
}

func generateLiteratureUnderline(annot api.ZoteroAnnotation, b *bytes.Buffer) error {
	comment := fmt.Sprintf("%s\n", annot.AnnotationComment)
	if annot.AnnotationComment == "" {
		comment = ""
	}
	text := fmt.Sprintf("underline %s(p.%s[%d]):\n`%s`\n%s\n",
		ColorToIcon[annot.AnnotationColor],
		annot.AnnotationPageLabel,
		annot.AnnotationPosition.PageIndex,
		annot.AnnotationText,
		comment)

	b.WriteString(text)
	return nil

	return nil
}
